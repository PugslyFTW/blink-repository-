#
import RPi.GPIO as GPIO
import time
from time import sleep
# Debug Settings
GPIO.setwarnings(False)
debug_messages = 1 # If debug messages is 1 then message will be printed, else if 0 they will be silenced
if debug_messages : print("Debug Message are 'ON'")
else : print("Debug Message are 'OFF'")
hardware_test_messages = 1 # If debug messages is 1 then message will be printed, else if 0 they will be silenced
if hardware_test_messages : print("Hardware Test Message are 'ON'")
else : print("Hardware Test Message are 'OFF'")    
# Makey Bot Pin Assignments
GPIO.setmode(GPIO.BOARD) # Note This is specifying the physical pins on the Raspberry Pi Header

redRGBPin = 11
greenRGBPin = 13
blueRGBPin = 15
GPIO.setup(redRGBPin,GPIO.OUT)
GPIO.setup(greenRGBPin,GPIO.OUT)
GPIO.setup(blueRGBPin,GPIO.OUT)


#choosing a frequency for pwm
Freq = 1000

#defining the pins that are going to be used with PWM
REDRGB = GPIO.PWM(redRGBPin, Freq)  
GREENRGB = GPIO.PWM(greenRGBPin, Freq)
BLUERGB = GPIO.PWM(blueRGBPin, Freq)

#lighting up the pins. 100 means giving 100% to the pin
REDRGB.start(1)
GREENRGB.start(1)
BLUERGB.start(1)
def parse_color(color_str):
    color_str = color_str.strip()
    if re.match(r'^#?([0-9a-fA-F]{2}){3}$', color_str):
        # If it's a 6 digit hex string or #6 digit hex string
        r = int(color_str[0:2], 16)
        g = int(color_str[2:4], 16)
        b = int(color_str[4:], 16)
        return [r, g, b]
    else:
        # Otherwise, check if it's a predefined color
        color_dict = {
            'RED': [255, 0, 0],
            'GREEN': [0, 255, 0],
            'BLUE': [0, 0, 255],
            # Add more colors as needed
        }
        if color_str.upper() in color_dict:
            return color_dict[color_str.upper()]
        else:
            # Default to white
            return [255, 255, 255]

def rgbWrite(r, g, b):
    r = max(0, min(255, r))
    g = max(0, min(255, g))
    b = max(0, min(255, b))
    
    r = (r / 255) * 100
    g = (g / 255) * 100
    b = (b / 255) * 100
    
    REDRGB.ChangeDutyCycle(r)
    GREENRGB.ChangeDutyCycle(g)
    BLUERGB.ChangeDutyCycle(b)

# Example usage:
# color = parse_color("FF0000")  # This can be hex string, #hex string, or color name
# rgbWrite(color[0], color[1], color[2])
